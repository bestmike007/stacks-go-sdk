/*
Stacks Blockchain API

Welcome to the API reference overview for the [Stacks Blockchain API](https://docs.hiro.so/stacks-blockchain-api).        [Download Postman collection](https://hirosystems.github.io/stacks-blockchain-api/collection.json)

API version: v8.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stacks_blockchain_api_client

import (
	"encoding/json"
	"fmt"
)


// TokenTransferTransaction1EventsInner struct for TokenTransferTransaction1EventsInner
type TokenTransferTransaction1EventsInner struct {
	FungibleTokenAssetTransactionEvent1 *FungibleTokenAssetTransactionEvent1
	NonFungibleTokenAssetTransactionEvent1 *NonFungibleTokenAssetTransactionEvent1
	SmartContractLogTransactionEvent1 *SmartContractLogTransactionEvent1
	StxAssetTransactionEvent1 *StxAssetTransactionEvent1
	StxLockTransactionEvent1 *StxLockTransactionEvent1
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *TokenTransferTransaction1EventsInner) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into FungibleTokenAssetTransactionEvent1
	err = json.Unmarshal(data, &dst.FungibleTokenAssetTransactionEvent1);
	if err == nil {
		jsonFungibleTokenAssetTransactionEvent1, _ := json.Marshal(dst.FungibleTokenAssetTransactionEvent1)
		if string(jsonFungibleTokenAssetTransactionEvent1) == "{}" { // empty struct
			dst.FungibleTokenAssetTransactionEvent1 = nil
		} else {
			return nil // data stored in dst.FungibleTokenAssetTransactionEvent1, return on the first match
		}
	} else {
		dst.FungibleTokenAssetTransactionEvent1 = nil
	}

	// try to unmarshal JSON data into NonFungibleTokenAssetTransactionEvent1
	err = json.Unmarshal(data, &dst.NonFungibleTokenAssetTransactionEvent1);
	if err == nil {
		jsonNonFungibleTokenAssetTransactionEvent1, _ := json.Marshal(dst.NonFungibleTokenAssetTransactionEvent1)
		if string(jsonNonFungibleTokenAssetTransactionEvent1) == "{}" { // empty struct
			dst.NonFungibleTokenAssetTransactionEvent1 = nil
		} else {
			return nil // data stored in dst.NonFungibleTokenAssetTransactionEvent1, return on the first match
		}
	} else {
		dst.NonFungibleTokenAssetTransactionEvent1 = nil
	}

	// try to unmarshal JSON data into SmartContractLogTransactionEvent1
	err = json.Unmarshal(data, &dst.SmartContractLogTransactionEvent1);
	if err == nil {
		jsonSmartContractLogTransactionEvent1, _ := json.Marshal(dst.SmartContractLogTransactionEvent1)
		if string(jsonSmartContractLogTransactionEvent1) == "{}" { // empty struct
			dst.SmartContractLogTransactionEvent1 = nil
		} else {
			return nil // data stored in dst.SmartContractLogTransactionEvent1, return on the first match
		}
	} else {
		dst.SmartContractLogTransactionEvent1 = nil
	}

	// try to unmarshal JSON data into StxAssetTransactionEvent1
	err = json.Unmarshal(data, &dst.StxAssetTransactionEvent1);
	if err == nil {
		jsonStxAssetTransactionEvent1, _ := json.Marshal(dst.StxAssetTransactionEvent1)
		if string(jsonStxAssetTransactionEvent1) == "{}" { // empty struct
			dst.StxAssetTransactionEvent1 = nil
		} else {
			return nil // data stored in dst.StxAssetTransactionEvent1, return on the first match
		}
	} else {
		dst.StxAssetTransactionEvent1 = nil
	}

	// try to unmarshal JSON data into StxLockTransactionEvent1
	err = json.Unmarshal(data, &dst.StxLockTransactionEvent1);
	if err == nil {
		jsonStxLockTransactionEvent1, _ := json.Marshal(dst.StxLockTransactionEvent1)
		if string(jsonStxLockTransactionEvent1) == "{}" { // empty struct
			dst.StxLockTransactionEvent1 = nil
		} else {
			return nil // data stored in dst.StxLockTransactionEvent1, return on the first match
		}
	} else {
		dst.StxLockTransactionEvent1 = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(TokenTransferTransaction1EventsInner)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *TokenTransferTransaction1EventsInner) MarshalJSON() ([]byte, error) {
	if src.FungibleTokenAssetTransactionEvent1 != nil {
		return json.Marshal(&src.FungibleTokenAssetTransactionEvent1)
	}

	if src.NonFungibleTokenAssetTransactionEvent1 != nil {
		return json.Marshal(&src.NonFungibleTokenAssetTransactionEvent1)
	}

	if src.SmartContractLogTransactionEvent1 != nil {
		return json.Marshal(&src.SmartContractLogTransactionEvent1)
	}

	if src.StxAssetTransactionEvent1 != nil {
		return json.Marshal(&src.StxAssetTransactionEvent1)
	}

	if src.StxLockTransactionEvent1 != nil {
		return json.Marshal(&src.StxLockTransactionEvent1)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableTokenTransferTransaction1EventsInner struct {
	value *TokenTransferTransaction1EventsInner
	isSet bool
}

func (v NullableTokenTransferTransaction1EventsInner) Get() *TokenTransferTransaction1EventsInner {
	return v.value
}

func (v *NullableTokenTransferTransaction1EventsInner) Set(val *TokenTransferTransaction1EventsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenTransferTransaction1EventsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenTransferTransaction1EventsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenTransferTransaction1EventsInner(val *TokenTransferTransaction1EventsInner) *NullableTokenTransferTransaction1EventsInner {
	return &NullableTokenTransferTransaction1EventsInner{value: val, isSet: true}
}

func (v NullableTokenTransferTransaction1EventsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenTransferTransaction1EventsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


