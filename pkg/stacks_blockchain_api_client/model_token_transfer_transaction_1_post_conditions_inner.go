/*
Stacks Blockchain API

Welcome to the API reference overview for the [Stacks Blockchain API](https://docs.hiro.so/stacks-blockchain-api).        [Download Postman collection](https://hirosystems.github.io/stacks-blockchain-api/collection.json)

API version: v8.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stacks_blockchain_api_client

import (
	"encoding/json"
	"fmt"
)


// TokenTransferTransaction1PostConditionsInner struct for TokenTransferTransaction1PostConditionsInner
type TokenTransferTransaction1PostConditionsInner struct {
	TokenTransferTransaction1PostConditionsInnerAnyOf *TokenTransferTransaction1PostConditionsInnerAnyOf
	TokenTransferTransaction1PostConditionsInnerAnyOf1 *TokenTransferTransaction1PostConditionsInnerAnyOf1
	TokenTransferTransaction1PostConditionsInnerAnyOf2 *TokenTransferTransaction1PostConditionsInnerAnyOf2
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *TokenTransferTransaction1PostConditionsInner) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into TokenTransferTransaction1PostConditionsInnerAnyOf
	err = json.Unmarshal(data, &dst.TokenTransferTransaction1PostConditionsInnerAnyOf);
	if err == nil {
		jsonTokenTransferTransaction1PostConditionsInnerAnyOf, _ := json.Marshal(dst.TokenTransferTransaction1PostConditionsInnerAnyOf)
		if string(jsonTokenTransferTransaction1PostConditionsInnerAnyOf) == "{}" { // empty struct
			dst.TokenTransferTransaction1PostConditionsInnerAnyOf = nil
		} else {
			return nil // data stored in dst.TokenTransferTransaction1PostConditionsInnerAnyOf, return on the first match
		}
	} else {
		dst.TokenTransferTransaction1PostConditionsInnerAnyOf = nil
	}

	// try to unmarshal JSON data into TokenTransferTransaction1PostConditionsInnerAnyOf1
	err = json.Unmarshal(data, &dst.TokenTransferTransaction1PostConditionsInnerAnyOf1);
	if err == nil {
		jsonTokenTransferTransaction1PostConditionsInnerAnyOf1, _ := json.Marshal(dst.TokenTransferTransaction1PostConditionsInnerAnyOf1)
		if string(jsonTokenTransferTransaction1PostConditionsInnerAnyOf1) == "{}" { // empty struct
			dst.TokenTransferTransaction1PostConditionsInnerAnyOf1 = nil
		} else {
			return nil // data stored in dst.TokenTransferTransaction1PostConditionsInnerAnyOf1, return on the first match
		}
	} else {
		dst.TokenTransferTransaction1PostConditionsInnerAnyOf1 = nil
	}

	// try to unmarshal JSON data into TokenTransferTransaction1PostConditionsInnerAnyOf2
	err = json.Unmarshal(data, &dst.TokenTransferTransaction1PostConditionsInnerAnyOf2);
	if err == nil {
		jsonTokenTransferTransaction1PostConditionsInnerAnyOf2, _ := json.Marshal(dst.TokenTransferTransaction1PostConditionsInnerAnyOf2)
		if string(jsonTokenTransferTransaction1PostConditionsInnerAnyOf2) == "{}" { // empty struct
			dst.TokenTransferTransaction1PostConditionsInnerAnyOf2 = nil
		} else {
			return nil // data stored in dst.TokenTransferTransaction1PostConditionsInnerAnyOf2, return on the first match
		}
	} else {
		dst.TokenTransferTransaction1PostConditionsInnerAnyOf2 = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(TokenTransferTransaction1PostConditionsInner)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *TokenTransferTransaction1PostConditionsInner) MarshalJSON() ([]byte, error) {
	if src.TokenTransferTransaction1PostConditionsInnerAnyOf != nil {
		return json.Marshal(&src.TokenTransferTransaction1PostConditionsInnerAnyOf)
	}

	if src.TokenTransferTransaction1PostConditionsInnerAnyOf1 != nil {
		return json.Marshal(&src.TokenTransferTransaction1PostConditionsInnerAnyOf1)
	}

	if src.TokenTransferTransaction1PostConditionsInnerAnyOf2 != nil {
		return json.Marshal(&src.TokenTransferTransaction1PostConditionsInnerAnyOf2)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableTokenTransferTransaction1PostConditionsInner struct {
	value *TokenTransferTransaction1PostConditionsInner
	isSet bool
}

func (v NullableTokenTransferTransaction1PostConditionsInner) Get() *TokenTransferTransaction1PostConditionsInner {
	return v.value
}

func (v *NullableTokenTransferTransaction1PostConditionsInner) Set(val *TokenTransferTransaction1PostConditionsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenTransferTransaction1PostConditionsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenTransferTransaction1PostConditionsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenTransferTransaction1PostConditionsInner(val *TokenTransferTransaction1PostConditionsInner) *NullableTokenTransferTransaction1PostConditionsInner {
	return &NullableTokenTransferTransaction1PostConditionsInner{value: val, isSet: true}
}

func (v NullableTokenTransferTransaction1PostConditionsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenTransferTransaction1PostConditionsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


