/*
Stacks Blockchain API

Welcome to the API reference overview for the [Stacks Blockchain API](https://docs.hiro.so/stacks-blockchain-api).        [Download Postman collection](https://hirosystems.github.io/stacks-blockchain-api/collection.json)

API version: v8.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stacks_blockchain_api_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ContractCallTransactionContractCall type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContractCallTransactionContractCall{}

// ContractCallTransactionContractCall struct for ContractCallTransactionContractCall
type ContractCallTransactionContractCall struct {
	// Contract identifier formatted as `<principaladdress>.<contract_name>`
	ContractId string `json:"contract_id"`
	// Name of the Clarity function to be invoked
	FunctionName string `json:"function_name"`
	// Function definition, including function name and type as well as parameter names and types
	FunctionSignature string `json:"function_signature"`
	FunctionArgs []ContractCallTransactionContractCallFunctionArgsInner `json:"function_args,omitempty"`
}

type _ContractCallTransactionContractCall ContractCallTransactionContractCall

// NewContractCallTransactionContractCall instantiates a new ContractCallTransactionContractCall object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContractCallTransactionContractCall(contractId string, functionName string, functionSignature string) *ContractCallTransactionContractCall {
	this := ContractCallTransactionContractCall{}
	this.ContractId = contractId
	this.FunctionName = functionName
	this.FunctionSignature = functionSignature
	return &this
}

// NewContractCallTransactionContractCallWithDefaults instantiates a new ContractCallTransactionContractCall object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContractCallTransactionContractCallWithDefaults() *ContractCallTransactionContractCall {
	this := ContractCallTransactionContractCall{}
	return &this
}

// GetContractId returns the ContractId field value
func (o *ContractCallTransactionContractCall) GetContractId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContractId
}

// GetContractIdOk returns a tuple with the ContractId field value
// and a boolean to check if the value has been set.
func (o *ContractCallTransactionContractCall) GetContractIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContractId, true
}

// SetContractId sets field value
func (o *ContractCallTransactionContractCall) SetContractId(v string) {
	o.ContractId = v
}

// GetFunctionName returns the FunctionName field value
func (o *ContractCallTransactionContractCall) GetFunctionName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FunctionName
}

// GetFunctionNameOk returns a tuple with the FunctionName field value
// and a boolean to check if the value has been set.
func (o *ContractCallTransactionContractCall) GetFunctionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FunctionName, true
}

// SetFunctionName sets field value
func (o *ContractCallTransactionContractCall) SetFunctionName(v string) {
	o.FunctionName = v
}

// GetFunctionSignature returns the FunctionSignature field value
func (o *ContractCallTransactionContractCall) GetFunctionSignature() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FunctionSignature
}

// GetFunctionSignatureOk returns a tuple with the FunctionSignature field value
// and a boolean to check if the value has been set.
func (o *ContractCallTransactionContractCall) GetFunctionSignatureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FunctionSignature, true
}

// SetFunctionSignature sets field value
func (o *ContractCallTransactionContractCall) SetFunctionSignature(v string) {
	o.FunctionSignature = v
}

// GetFunctionArgs returns the FunctionArgs field value if set, zero value otherwise.
func (o *ContractCallTransactionContractCall) GetFunctionArgs() []ContractCallTransactionContractCallFunctionArgsInner {
	if o == nil || IsNil(o.FunctionArgs) {
		var ret []ContractCallTransactionContractCallFunctionArgsInner
		return ret
	}
	return o.FunctionArgs
}

// GetFunctionArgsOk returns a tuple with the FunctionArgs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractCallTransactionContractCall) GetFunctionArgsOk() ([]ContractCallTransactionContractCallFunctionArgsInner, bool) {
	if o == nil || IsNil(o.FunctionArgs) {
		return nil, false
	}
	return o.FunctionArgs, true
}

// HasFunctionArgs returns a boolean if a field has been set.
func (o *ContractCallTransactionContractCall) HasFunctionArgs() bool {
	if o != nil && !IsNil(o.FunctionArgs) {
		return true
	}

	return false
}

// SetFunctionArgs gets a reference to the given []ContractCallTransactionContractCallFunctionArgsInner and assigns it to the FunctionArgs field.
func (o *ContractCallTransactionContractCall) SetFunctionArgs(v []ContractCallTransactionContractCallFunctionArgsInner) {
	o.FunctionArgs = v
}

func (o ContractCallTransactionContractCall) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContractCallTransactionContractCall) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["contract_id"] = o.ContractId
	toSerialize["function_name"] = o.FunctionName
	toSerialize["function_signature"] = o.FunctionSignature
	if !IsNil(o.FunctionArgs) {
		toSerialize["function_args"] = o.FunctionArgs
	}
	return toSerialize, nil
}

func (o *ContractCallTransactionContractCall) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"contract_id",
		"function_name",
		"function_signature",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContractCallTransactionContractCall := _ContractCallTransactionContractCall{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContractCallTransactionContractCall)

	if err != nil {
		return err
	}

	*o = ContractCallTransactionContractCall(varContractCallTransactionContractCall)

	return err
}

type NullableContractCallTransactionContractCall struct {
	value *ContractCallTransactionContractCall
	isSet bool
}

func (v NullableContractCallTransactionContractCall) Get() *ContractCallTransactionContractCall {
	return v.value
}

func (v *NullableContractCallTransactionContractCall) Set(val *ContractCallTransactionContractCall) {
	v.value = val
	v.isSet = true
}

func (v NullableContractCallTransactionContractCall) IsSet() bool {
	return v.isSet
}

func (v *NullableContractCallTransactionContractCall) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContractCallTransactionContractCall(val *ContractCallTransactionContractCall) *NullableContractCallTransactionContractCall {
	return &NullableContractCallTransactionContractCall{value: val, isSet: true}
}

func (v NullableContractCallTransactionContractCall) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContractCallTransactionContractCall) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


