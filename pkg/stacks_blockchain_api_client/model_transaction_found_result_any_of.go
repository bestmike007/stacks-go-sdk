/*
Stacks Blockchain API

Welcome to the API reference overview for the [Stacks Blockchain API](https://docs.hiro.so/stacks-blockchain-api).        [Download Postman collection](https://hirosystems.github.io/stacks-blockchain-api/collection.json)

API version: v8.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stacks_blockchain_api_client

import (
	"encoding/json"
	"fmt"
)


// TransactionFoundResultAnyOf struct for TransactionFoundResultAnyOf
type TransactionFoundResultAnyOf struct {
	CoinbaseTransaction1 *CoinbaseTransaction1
	ContractCallTransaction1 *ContractCallTransaction1
	PoisonMicroblockTransaction1 *PoisonMicroblockTransaction1
	SmartContractTransaction1 *SmartContractTransaction1
	TenureChangeTransaction1 *TenureChangeTransaction1
	TokenTransferTransaction1 *TokenTransferTransaction1
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *TransactionFoundResultAnyOf) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into CoinbaseTransaction1
	err = json.Unmarshal(data, &dst.CoinbaseTransaction1);
	if err == nil {
		jsonCoinbaseTransaction1, _ := json.Marshal(dst.CoinbaseTransaction1)
		if string(jsonCoinbaseTransaction1) == "{}" { // empty struct
			dst.CoinbaseTransaction1 = nil
		} else {
			return nil // data stored in dst.CoinbaseTransaction1, return on the first match
		}
	} else {
		dst.CoinbaseTransaction1 = nil
	}

	// try to unmarshal JSON data into ContractCallTransaction1
	err = json.Unmarshal(data, &dst.ContractCallTransaction1);
	if err == nil {
		jsonContractCallTransaction1, _ := json.Marshal(dst.ContractCallTransaction1)
		if string(jsonContractCallTransaction1) == "{}" { // empty struct
			dst.ContractCallTransaction1 = nil
		} else {
			return nil // data stored in dst.ContractCallTransaction1, return on the first match
		}
	} else {
		dst.ContractCallTransaction1 = nil
	}

	// try to unmarshal JSON data into PoisonMicroblockTransaction1
	err = json.Unmarshal(data, &dst.PoisonMicroblockTransaction1);
	if err == nil {
		jsonPoisonMicroblockTransaction1, _ := json.Marshal(dst.PoisonMicroblockTransaction1)
		if string(jsonPoisonMicroblockTransaction1) == "{}" { // empty struct
			dst.PoisonMicroblockTransaction1 = nil
		} else {
			return nil // data stored in dst.PoisonMicroblockTransaction1, return on the first match
		}
	} else {
		dst.PoisonMicroblockTransaction1 = nil
	}

	// try to unmarshal JSON data into SmartContractTransaction1
	err = json.Unmarshal(data, &dst.SmartContractTransaction1);
	if err == nil {
		jsonSmartContractTransaction1, _ := json.Marshal(dst.SmartContractTransaction1)
		if string(jsonSmartContractTransaction1) == "{}" { // empty struct
			dst.SmartContractTransaction1 = nil
		} else {
			return nil // data stored in dst.SmartContractTransaction1, return on the first match
		}
	} else {
		dst.SmartContractTransaction1 = nil
	}

	// try to unmarshal JSON data into TenureChangeTransaction1
	err = json.Unmarshal(data, &dst.TenureChangeTransaction1);
	if err == nil {
		jsonTenureChangeTransaction1, _ := json.Marshal(dst.TenureChangeTransaction1)
		if string(jsonTenureChangeTransaction1) == "{}" { // empty struct
			dst.TenureChangeTransaction1 = nil
		} else {
			return nil // data stored in dst.TenureChangeTransaction1, return on the first match
		}
	} else {
		dst.TenureChangeTransaction1 = nil
	}

	// try to unmarshal JSON data into TokenTransferTransaction1
	err = json.Unmarshal(data, &dst.TokenTransferTransaction1);
	if err == nil {
		jsonTokenTransferTransaction1, _ := json.Marshal(dst.TokenTransferTransaction1)
		if string(jsonTokenTransferTransaction1) == "{}" { // empty struct
			dst.TokenTransferTransaction1 = nil
		} else {
			return nil // data stored in dst.TokenTransferTransaction1, return on the first match
		}
	} else {
		dst.TokenTransferTransaction1 = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(TransactionFoundResultAnyOf)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *TransactionFoundResultAnyOf) MarshalJSON() ([]byte, error) {
	if src.CoinbaseTransaction1 != nil {
		return json.Marshal(&src.CoinbaseTransaction1)
	}

	if src.ContractCallTransaction1 != nil {
		return json.Marshal(&src.ContractCallTransaction1)
	}

	if src.PoisonMicroblockTransaction1 != nil {
		return json.Marshal(&src.PoisonMicroblockTransaction1)
	}

	if src.SmartContractTransaction1 != nil {
		return json.Marshal(&src.SmartContractTransaction1)
	}

	if src.TenureChangeTransaction1 != nil {
		return json.Marshal(&src.TenureChangeTransaction1)
	}

	if src.TokenTransferTransaction1 != nil {
		return json.Marshal(&src.TokenTransferTransaction1)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableTransactionFoundResultAnyOf struct {
	value *TransactionFoundResultAnyOf
	isSet bool
}

func (v NullableTransactionFoundResultAnyOf) Get() *TransactionFoundResultAnyOf {
	return v.value
}

func (v *NullableTransactionFoundResultAnyOf) Set(val *TransactionFoundResultAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionFoundResultAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionFoundResultAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionFoundResultAnyOf(val *TransactionFoundResultAnyOf) *NullableTransactionFoundResultAnyOf {
	return &NullableTransactionFoundResultAnyOf{value: val, isSet: true}
}

func (v NullableTransactionFoundResultAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionFoundResultAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


