/*
Stacks Blockchain API

Welcome to the API reference overview for the [Stacks Blockchain API](https://docs.hiro.so/stacks-blockchain-api).        [Download Postman collection](https://hirosystems.github.io/stacks-blockchain-api/collection.json)

API version: v8.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stacks_blockchain_api_client

import (
	"encoding/json"
	"fmt"
)


// TokenTransferTransactionEventsInner struct for TokenTransferTransactionEventsInner
type TokenTransferTransactionEventsInner struct {
	FungibleTokenAssetTransactionEvent *FungibleTokenAssetTransactionEvent
	NonFungibleTokenAssetTransactionEvent *NonFungibleTokenAssetTransactionEvent
	SmartContractLogTransactionEvent *SmartContractLogTransactionEvent
	StxAssetTransactionEvent *StxAssetTransactionEvent
	StxLockTransactionEvent *StxLockTransactionEvent
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *TokenTransferTransactionEventsInner) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into FungibleTokenAssetTransactionEvent
	err = json.Unmarshal(data, &dst.FungibleTokenAssetTransactionEvent);
	if err == nil {
		jsonFungibleTokenAssetTransactionEvent, _ := json.Marshal(dst.FungibleTokenAssetTransactionEvent)
		if string(jsonFungibleTokenAssetTransactionEvent) == "{}" { // empty struct
			dst.FungibleTokenAssetTransactionEvent = nil
		} else {
			return nil // data stored in dst.FungibleTokenAssetTransactionEvent, return on the first match
		}
	} else {
		dst.FungibleTokenAssetTransactionEvent = nil
	}

	// try to unmarshal JSON data into NonFungibleTokenAssetTransactionEvent
	err = json.Unmarshal(data, &dst.NonFungibleTokenAssetTransactionEvent);
	if err == nil {
		jsonNonFungibleTokenAssetTransactionEvent, _ := json.Marshal(dst.NonFungibleTokenAssetTransactionEvent)
		if string(jsonNonFungibleTokenAssetTransactionEvent) == "{}" { // empty struct
			dst.NonFungibleTokenAssetTransactionEvent = nil
		} else {
			return nil // data stored in dst.NonFungibleTokenAssetTransactionEvent, return on the first match
		}
	} else {
		dst.NonFungibleTokenAssetTransactionEvent = nil
	}

	// try to unmarshal JSON data into SmartContractLogTransactionEvent
	err = json.Unmarshal(data, &dst.SmartContractLogTransactionEvent);
	if err == nil {
		jsonSmartContractLogTransactionEvent, _ := json.Marshal(dst.SmartContractLogTransactionEvent)
		if string(jsonSmartContractLogTransactionEvent) == "{}" { // empty struct
			dst.SmartContractLogTransactionEvent = nil
		} else {
			return nil // data stored in dst.SmartContractLogTransactionEvent, return on the first match
		}
	} else {
		dst.SmartContractLogTransactionEvent = nil
	}

	// try to unmarshal JSON data into StxAssetTransactionEvent
	err = json.Unmarshal(data, &dst.StxAssetTransactionEvent);
	if err == nil {
		jsonStxAssetTransactionEvent, _ := json.Marshal(dst.StxAssetTransactionEvent)
		if string(jsonStxAssetTransactionEvent) == "{}" { // empty struct
			dst.StxAssetTransactionEvent = nil
		} else {
			return nil // data stored in dst.StxAssetTransactionEvent, return on the first match
		}
	} else {
		dst.StxAssetTransactionEvent = nil
	}

	// try to unmarshal JSON data into StxLockTransactionEvent
	err = json.Unmarshal(data, &dst.StxLockTransactionEvent);
	if err == nil {
		jsonStxLockTransactionEvent, _ := json.Marshal(dst.StxLockTransactionEvent)
		if string(jsonStxLockTransactionEvent) == "{}" { // empty struct
			dst.StxLockTransactionEvent = nil
		} else {
			return nil // data stored in dst.StxLockTransactionEvent, return on the first match
		}
	} else {
		dst.StxLockTransactionEvent = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(TokenTransferTransactionEventsInner)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *TokenTransferTransactionEventsInner) MarshalJSON() ([]byte, error) {
	if src.FungibleTokenAssetTransactionEvent != nil {
		return json.Marshal(&src.FungibleTokenAssetTransactionEvent)
	}

	if src.NonFungibleTokenAssetTransactionEvent != nil {
		return json.Marshal(&src.NonFungibleTokenAssetTransactionEvent)
	}

	if src.SmartContractLogTransactionEvent != nil {
		return json.Marshal(&src.SmartContractLogTransactionEvent)
	}

	if src.StxAssetTransactionEvent != nil {
		return json.Marshal(&src.StxAssetTransactionEvent)
	}

	if src.StxLockTransactionEvent != nil {
		return json.Marshal(&src.StxLockTransactionEvent)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableTokenTransferTransactionEventsInner struct {
	value *TokenTransferTransactionEventsInner
	isSet bool
}

func (v NullableTokenTransferTransactionEventsInner) Get() *TokenTransferTransactionEventsInner {
	return v.value
}

func (v *NullableTokenTransferTransactionEventsInner) Set(val *TokenTransferTransactionEventsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenTransferTransactionEventsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenTransferTransactionEventsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenTransferTransactionEventsInner(val *TokenTransferTransactionEventsInner) *NullableTokenTransferTransactionEventsInner {
	return &NullableTokenTransferTransactionEventsInner{value: val, isSet: true}
}

func (v NullableTokenTransferTransactionEventsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenTransferTransactionEventsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


