/*
Stacks Blockchain API

Welcome to the API reference overview for the [Stacks Blockchain API](https://docs.hiro.so/stacks-blockchain-api).        [Download Postman collection](https://hirosystems.github.io/stacks-blockchain-api/collection.json)

API version: v8.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stacks_blockchain_api_client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// StackingAPIService StackingAPI service
type StackingAPIService service

type ApiExtendedV1PoxEventsGetRequest struct {
	ctx context.Context
	ApiService *StackingAPIService
	pox ExtendedV1PoxEventsGetPoxParameter
	limit *int32
	offset *int32
}

// Results per page
func (r ApiExtendedV1PoxEventsGetRequest) Limit(limit int32) ApiExtendedV1PoxEventsGetRequest {
	r.limit = &limit
	return r
}

// Result offset
func (r ApiExtendedV1PoxEventsGetRequest) Offset(offset int32) ApiExtendedV1PoxEventsGetRequest {
	r.offset = &offset
	return r
}

func (r ApiExtendedV1PoxEventsGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtendedV1PoxEventsGetExecute(r)
}

/*
ExtendedV1PoxEventsGet Get latest PoX events

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pox
 @return ApiExtendedV1PoxEventsGetRequest
*/
func (a *StackingAPIService) ExtendedV1PoxEventsGet(ctx context.Context, pox ExtendedV1PoxEventsGetPoxParameter) ApiExtendedV1PoxEventsGetRequest {
	return ApiExtendedV1PoxEventsGetRequest{
		ApiService: a,
		ctx: ctx,
		pox: pox,
	}
}

// Execute executes the request
func (a *StackingAPIService) ExtendedV1PoxEventsGetExecute(r ApiExtendedV1PoxEventsGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StackingAPIService.ExtendedV1PoxEventsGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extended/v1/{pox}/events"
	localVarPath = strings.Replace(localVarPath, "{"+"pox"+"}", url.PathEscape(parameterValueToString(r.pox, "pox")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 96
		r.limit = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	} else {
		var defaultValue int32 = 0
		r.offset = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtendedV1PoxStackerPrincipalGetRequest struct {
	ctx context.Context
	ApiService *StackingAPIService
	pox ExtendedV1PoxEventsGetPoxParameter
	principal GetFilteredEventsAddressParameter
}

func (r ApiExtendedV1PoxStackerPrincipalGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtendedV1PoxStackerPrincipalGetExecute(r)
}

/*
ExtendedV1PoxStackerPrincipalGet Get events for a stacking address

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pox
 @param principal
 @return ApiExtendedV1PoxStackerPrincipalGetRequest
*/
func (a *StackingAPIService) ExtendedV1PoxStackerPrincipalGet(ctx context.Context, pox ExtendedV1PoxEventsGetPoxParameter, principal GetFilteredEventsAddressParameter) ApiExtendedV1PoxStackerPrincipalGetRequest {
	return ApiExtendedV1PoxStackerPrincipalGetRequest{
		ApiService: a,
		ctx: ctx,
		pox: pox,
		principal: principal,
	}
}

// Execute executes the request
func (a *StackingAPIService) ExtendedV1PoxStackerPrincipalGetExecute(r ApiExtendedV1PoxStackerPrincipalGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StackingAPIService.ExtendedV1PoxStackerPrincipalGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extended/v1/{pox}/stacker/{principal}"
	localVarPath = strings.Replace(localVarPath, "{"+"pox"+"}", url.PathEscape(parameterValueToString(r.pox, "pox")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"principal"+"}", url.PathEscape(parameterValueToString(r.principal, "principal")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtendedV1PoxTxTxIdGetRequest struct {
	ctx context.Context
	ApiService *StackingAPIService
	pox ExtendedV1PoxEventsGetPoxParameter
	txId string
}

func (r ApiExtendedV1PoxTxTxIdGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtendedV1PoxTxTxIdGetExecute(r)
}

/*
ExtendedV1PoxTxTxIdGet Get PoX events for a transaction

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pox
 @param txId
 @return ApiExtendedV1PoxTxTxIdGetRequest
*/
func (a *StackingAPIService) ExtendedV1PoxTxTxIdGet(ctx context.Context, pox ExtendedV1PoxEventsGetPoxParameter, txId string) ApiExtendedV1PoxTxTxIdGetRequest {
	return ApiExtendedV1PoxTxTxIdGetRequest{
		ApiService: a,
		ctx: ctx,
		pox: pox,
		txId: txId,
	}
}

// Execute executes the request
func (a *StackingAPIService) ExtendedV1PoxTxTxIdGetExecute(r ApiExtendedV1PoxTxTxIdGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StackingAPIService.ExtendedV1PoxTxTxIdGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extended/v1/{pox}/tx/{tx_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"pox"+"}", url.PathEscape(parameterValueToString(r.pox, "pox")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"tx_id"+"}", url.PathEscape(parameterValueToString(r.txId, "txId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetPoolDelegationsRequest struct {
	ctx context.Context
	ApiService *StackingAPIService
	pox ExtendedV1PoxEventsGetPoxParameter
	poolPrincipal string
	limit *int32
	offset *int32
	afterBlock *int32
	height *int32
	unanchored *bool
}

// Results per page
func (r ApiGetPoolDelegationsRequest) Limit(limit int32) ApiGetPoolDelegationsRequest {
	r.limit = &limit
	return r
}

// Result offset
func (r ApiGetPoolDelegationsRequest) Offset(offset int32) ApiGetPoolDelegationsRequest {
	r.offset = &offset
	return r
}

// If specified, only delegation events after the given block will be included
func (r ApiGetPoolDelegationsRequest) AfterBlock(afterBlock int32) ApiGetPoolDelegationsRequest {
	r.afterBlock = &afterBlock
	return r
}

func (r ApiGetPoolDelegationsRequest) Height(height int32) ApiGetPoolDelegationsRequest {
	r.height = &height
	return r
}

// Include data from unanchored (i.e. unconfirmed) microblocks
func (r ApiGetPoolDelegationsRequest) Unanchored(unanchored bool) ApiGetPoolDelegationsRequest {
	r.unanchored = &unanchored
	return r
}

func (r ApiGetPoolDelegationsRequest) Execute() (*GetPoolDelegations200Response, *http.Response, error) {
	return r.ApiService.GetPoolDelegationsExecute(r)
}

/*
GetPoolDelegations Stacking pool members

Retrieves the list of stacking pool members for a given delegator principal.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pox
 @param poolPrincipal Address principal of the stacking pool delegator
 @return ApiGetPoolDelegationsRequest
*/
func (a *StackingAPIService) GetPoolDelegations(ctx context.Context, pox ExtendedV1PoxEventsGetPoxParameter, poolPrincipal string) ApiGetPoolDelegationsRequest {
	return ApiGetPoolDelegationsRequest{
		ApiService: a,
		ctx: ctx,
		pox: pox,
		poolPrincipal: poolPrincipal,
	}
}

// Execute executes the request
//  @return GetPoolDelegations200Response
func (a *StackingAPIService) GetPoolDelegationsExecute(r ApiGetPoolDelegationsRequest) (*GetPoolDelegations200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetPoolDelegations200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StackingAPIService.GetPoolDelegations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extended/v1/{pox}/{pool_principal}/delegations"
	localVarPath = strings.Replace(localVarPath, "{"+"pox"+"}", url.PathEscape(parameterValueToString(r.pox, "pox")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"pool_principal"+"}", url.PathEscape(parameterValueToString(r.poolPrincipal, "poolPrincipal")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 100
		r.limit = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	} else {
		var defaultValue int32 = 0
		r.offset = &defaultValue
	}
	if r.afterBlock != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "after_block", r.afterBlock, "form", "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "height", r.height, "form", "")
	}
	if r.unanchored != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "unanchored", r.unanchored, "form", "")
	} else {
		var defaultValue bool = false
		r.unanchored = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
