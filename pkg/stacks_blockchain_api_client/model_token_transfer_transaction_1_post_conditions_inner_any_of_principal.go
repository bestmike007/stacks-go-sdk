/*
Stacks Blockchain API

Welcome to the API reference overview for the [Stacks Blockchain API](https://docs.hiro.so/stacks-blockchain-api).        [Download Postman collection](https://hirosystems.github.io/stacks-blockchain-api/collection.json)

API version: v8.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stacks_blockchain_api_client

import (
	"encoding/json"
	"fmt"
)


// TokenTransferTransaction1PostConditionsInnerAnyOfPrincipal struct for TokenTransferTransaction1PostConditionsInnerAnyOfPrincipal
type TokenTransferTransaction1PostConditionsInnerAnyOfPrincipal struct {
	TokenTransferTransaction1PostConditionsInnerAnyOfPrincipalAnyOf *TokenTransferTransaction1PostConditionsInnerAnyOfPrincipalAnyOf
	TokenTransferTransaction1PostConditionsInnerAnyOfPrincipalAnyOf1 *TokenTransferTransaction1PostConditionsInnerAnyOfPrincipalAnyOf1
	TokenTransferTransaction1PostConditionsInnerAnyOfPrincipalAnyOf2 *TokenTransferTransaction1PostConditionsInnerAnyOfPrincipalAnyOf2
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *TokenTransferTransaction1PostConditionsInnerAnyOfPrincipal) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into TokenTransferTransaction1PostConditionsInnerAnyOfPrincipalAnyOf
	err = json.Unmarshal(data, &dst.TokenTransferTransaction1PostConditionsInnerAnyOfPrincipalAnyOf);
	if err == nil {
		jsonTokenTransferTransaction1PostConditionsInnerAnyOfPrincipalAnyOf, _ := json.Marshal(dst.TokenTransferTransaction1PostConditionsInnerAnyOfPrincipalAnyOf)
		if string(jsonTokenTransferTransaction1PostConditionsInnerAnyOfPrincipalAnyOf) == "{}" { // empty struct
			dst.TokenTransferTransaction1PostConditionsInnerAnyOfPrincipalAnyOf = nil
		} else {
			return nil // data stored in dst.TokenTransferTransaction1PostConditionsInnerAnyOfPrincipalAnyOf, return on the first match
		}
	} else {
		dst.TokenTransferTransaction1PostConditionsInnerAnyOfPrincipalAnyOf = nil
	}

	// try to unmarshal JSON data into TokenTransferTransaction1PostConditionsInnerAnyOfPrincipalAnyOf1
	err = json.Unmarshal(data, &dst.TokenTransferTransaction1PostConditionsInnerAnyOfPrincipalAnyOf1);
	if err == nil {
		jsonTokenTransferTransaction1PostConditionsInnerAnyOfPrincipalAnyOf1, _ := json.Marshal(dst.TokenTransferTransaction1PostConditionsInnerAnyOfPrincipalAnyOf1)
		if string(jsonTokenTransferTransaction1PostConditionsInnerAnyOfPrincipalAnyOf1) == "{}" { // empty struct
			dst.TokenTransferTransaction1PostConditionsInnerAnyOfPrincipalAnyOf1 = nil
		} else {
			return nil // data stored in dst.TokenTransferTransaction1PostConditionsInnerAnyOfPrincipalAnyOf1, return on the first match
		}
	} else {
		dst.TokenTransferTransaction1PostConditionsInnerAnyOfPrincipalAnyOf1 = nil
	}

	// try to unmarshal JSON data into TokenTransferTransaction1PostConditionsInnerAnyOfPrincipalAnyOf2
	err = json.Unmarshal(data, &dst.TokenTransferTransaction1PostConditionsInnerAnyOfPrincipalAnyOf2);
	if err == nil {
		jsonTokenTransferTransaction1PostConditionsInnerAnyOfPrincipalAnyOf2, _ := json.Marshal(dst.TokenTransferTransaction1PostConditionsInnerAnyOfPrincipalAnyOf2)
		if string(jsonTokenTransferTransaction1PostConditionsInnerAnyOfPrincipalAnyOf2) == "{}" { // empty struct
			dst.TokenTransferTransaction1PostConditionsInnerAnyOfPrincipalAnyOf2 = nil
		} else {
			return nil // data stored in dst.TokenTransferTransaction1PostConditionsInnerAnyOfPrincipalAnyOf2, return on the first match
		}
	} else {
		dst.TokenTransferTransaction1PostConditionsInnerAnyOfPrincipalAnyOf2 = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(TokenTransferTransaction1PostConditionsInnerAnyOfPrincipal)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *TokenTransferTransaction1PostConditionsInnerAnyOfPrincipal) MarshalJSON() ([]byte, error) {
	if src.TokenTransferTransaction1PostConditionsInnerAnyOfPrincipalAnyOf != nil {
		return json.Marshal(&src.TokenTransferTransaction1PostConditionsInnerAnyOfPrincipalAnyOf)
	}

	if src.TokenTransferTransaction1PostConditionsInnerAnyOfPrincipalAnyOf1 != nil {
		return json.Marshal(&src.TokenTransferTransaction1PostConditionsInnerAnyOfPrincipalAnyOf1)
	}

	if src.TokenTransferTransaction1PostConditionsInnerAnyOfPrincipalAnyOf2 != nil {
		return json.Marshal(&src.TokenTransferTransaction1PostConditionsInnerAnyOfPrincipalAnyOf2)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableTokenTransferTransaction1PostConditionsInnerAnyOfPrincipal struct {
	value *TokenTransferTransaction1PostConditionsInnerAnyOfPrincipal
	isSet bool
}

func (v NullableTokenTransferTransaction1PostConditionsInnerAnyOfPrincipal) Get() *TokenTransferTransaction1PostConditionsInnerAnyOfPrincipal {
	return v.value
}

func (v *NullableTokenTransferTransaction1PostConditionsInnerAnyOfPrincipal) Set(val *TokenTransferTransaction1PostConditionsInnerAnyOfPrincipal) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenTransferTransaction1PostConditionsInnerAnyOfPrincipal) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenTransferTransaction1PostConditionsInnerAnyOfPrincipal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenTransferTransaction1PostConditionsInnerAnyOfPrincipal(val *TokenTransferTransaction1PostConditionsInnerAnyOfPrincipal) *NullableTokenTransferTransaction1PostConditionsInnerAnyOfPrincipal {
	return &NullableTokenTransferTransaction1PostConditionsInnerAnyOfPrincipal{value: val, isSet: true}
}

func (v NullableTokenTransferTransaction1PostConditionsInnerAnyOfPrincipal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenTransferTransaction1PostConditionsInnerAnyOfPrincipal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


