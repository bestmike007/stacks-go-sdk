/*
Stacks Blockchain API

Welcome to the API reference overview for the [Stacks Blockchain API](https://docs.hiro.so/stacks-blockchain-api).        [Download Postman collection](https://hirosystems.github.io/stacks-blockchain-api/collection.json)

API version: v8.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stacks_blockchain_api_client

import (
	"encoding/json"
	"fmt"
)


// NonFungibleTokenHoldingsList List of Non-Fungible Token holdings
type NonFungibleTokenHoldingsList struct {
	NonFungibleTokenHoldingWithTxId *NonFungibleTokenHoldingWithTxId
	NonFungibleTokenHoldingWithTxMetadata *NonFungibleTokenHoldingWithTxMetadata
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *NonFungibleTokenHoldingsList) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into NonFungibleTokenHoldingWithTxId
	err = json.Unmarshal(data, &dst.NonFungibleTokenHoldingWithTxId);
	if err == nil {
		jsonNonFungibleTokenHoldingWithTxId, _ := json.Marshal(dst.NonFungibleTokenHoldingWithTxId)
		if string(jsonNonFungibleTokenHoldingWithTxId) == "{}" { // empty struct
			dst.NonFungibleTokenHoldingWithTxId = nil
		} else {
			return nil // data stored in dst.NonFungibleTokenHoldingWithTxId, return on the first match
		}
	} else {
		dst.NonFungibleTokenHoldingWithTxId = nil
	}

	// try to unmarshal JSON data into NonFungibleTokenHoldingWithTxMetadata
	err = json.Unmarshal(data, &dst.NonFungibleTokenHoldingWithTxMetadata);
	if err == nil {
		jsonNonFungibleTokenHoldingWithTxMetadata, _ := json.Marshal(dst.NonFungibleTokenHoldingWithTxMetadata)
		if string(jsonNonFungibleTokenHoldingWithTxMetadata) == "{}" { // empty struct
			dst.NonFungibleTokenHoldingWithTxMetadata = nil
		} else {
			return nil // data stored in dst.NonFungibleTokenHoldingWithTxMetadata, return on the first match
		}
	} else {
		dst.NonFungibleTokenHoldingWithTxMetadata = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(NonFungibleTokenHoldingsList)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *NonFungibleTokenHoldingsList) MarshalJSON() ([]byte, error) {
	if src.NonFungibleTokenHoldingWithTxId != nil {
		return json.Marshal(&src.NonFungibleTokenHoldingWithTxId)
	}

	if src.NonFungibleTokenHoldingWithTxMetadata != nil {
		return json.Marshal(&src.NonFungibleTokenHoldingWithTxMetadata)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableNonFungibleTokenHoldingsList struct {
	value *NonFungibleTokenHoldingsList
	isSet bool
}

func (v NullableNonFungibleTokenHoldingsList) Get() *NonFungibleTokenHoldingsList {
	return v.value
}

func (v *NullableNonFungibleTokenHoldingsList) Set(val *NonFungibleTokenHoldingsList) {
	v.value = val
	v.isSet = true
}

func (v NullableNonFungibleTokenHoldingsList) IsSet() bool {
	return v.isSet
}

func (v *NullableNonFungibleTokenHoldingsList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNonFungibleTokenHoldingsList(val *NonFungibleTokenHoldingsList) *NullableNonFungibleTokenHoldingsList {
	return &NullableNonFungibleTokenHoldingsList{value: val, isSet: true}
}

func (v NullableNonFungibleTokenHoldingsList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNonFungibleTokenHoldingsList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


