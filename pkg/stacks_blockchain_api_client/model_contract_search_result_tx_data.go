/*
Stacks Blockchain API

Welcome to the API reference overview for the [Stacks Blockchain API](https://docs.hiro.so/stacks-blockchain-api).        [Download Postman collection](https://hirosystems.github.io/stacks-blockchain-api/collection.json)

API version: v8.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stacks_blockchain_api_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ContractSearchResultTxData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContractSearchResultTxData{}

// ContractSearchResultTxData struct for ContractSearchResultTxData
type ContractSearchResultTxData struct {
	Canonical *bool `json:"canonical,omitempty"`
	BlockHash *string `json:"block_hash,omitempty"`
	BurnBlockTime *int32 `json:"burn_block_time,omitempty"`
	BlockHeight *int32 `json:"block_height,omitempty"`
	TxType string `json:"tx_type"`
	TxId string `json:"tx_id"`
}

type _ContractSearchResultTxData ContractSearchResultTxData

// NewContractSearchResultTxData instantiates a new ContractSearchResultTxData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContractSearchResultTxData(txType string, txId string) *ContractSearchResultTxData {
	this := ContractSearchResultTxData{}
	this.TxType = txType
	this.TxId = txId
	return &this
}

// NewContractSearchResultTxDataWithDefaults instantiates a new ContractSearchResultTxData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContractSearchResultTxDataWithDefaults() *ContractSearchResultTxData {
	this := ContractSearchResultTxData{}
	return &this
}

// GetCanonical returns the Canonical field value if set, zero value otherwise.
func (o *ContractSearchResultTxData) GetCanonical() bool {
	if o == nil || IsNil(o.Canonical) {
		var ret bool
		return ret
	}
	return *o.Canonical
}

// GetCanonicalOk returns a tuple with the Canonical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractSearchResultTxData) GetCanonicalOk() (*bool, bool) {
	if o == nil || IsNil(o.Canonical) {
		return nil, false
	}
	return o.Canonical, true
}

// HasCanonical returns a boolean if a field has been set.
func (o *ContractSearchResultTxData) HasCanonical() bool {
	if o != nil && !IsNil(o.Canonical) {
		return true
	}

	return false
}

// SetCanonical gets a reference to the given bool and assigns it to the Canonical field.
func (o *ContractSearchResultTxData) SetCanonical(v bool) {
	o.Canonical = &v
}

// GetBlockHash returns the BlockHash field value if set, zero value otherwise.
func (o *ContractSearchResultTxData) GetBlockHash() string {
	if o == nil || IsNil(o.BlockHash) {
		var ret string
		return ret
	}
	return *o.BlockHash
}

// GetBlockHashOk returns a tuple with the BlockHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractSearchResultTxData) GetBlockHashOk() (*string, bool) {
	if o == nil || IsNil(o.BlockHash) {
		return nil, false
	}
	return o.BlockHash, true
}

// HasBlockHash returns a boolean if a field has been set.
func (o *ContractSearchResultTxData) HasBlockHash() bool {
	if o != nil && !IsNil(o.BlockHash) {
		return true
	}

	return false
}

// SetBlockHash gets a reference to the given string and assigns it to the BlockHash field.
func (o *ContractSearchResultTxData) SetBlockHash(v string) {
	o.BlockHash = &v
}

// GetBurnBlockTime returns the BurnBlockTime field value if set, zero value otherwise.
func (o *ContractSearchResultTxData) GetBurnBlockTime() int32 {
	if o == nil || IsNil(o.BurnBlockTime) {
		var ret int32
		return ret
	}
	return *o.BurnBlockTime
}

// GetBurnBlockTimeOk returns a tuple with the BurnBlockTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractSearchResultTxData) GetBurnBlockTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.BurnBlockTime) {
		return nil, false
	}
	return o.BurnBlockTime, true
}

// HasBurnBlockTime returns a boolean if a field has been set.
func (o *ContractSearchResultTxData) HasBurnBlockTime() bool {
	if o != nil && !IsNil(o.BurnBlockTime) {
		return true
	}

	return false
}

// SetBurnBlockTime gets a reference to the given int32 and assigns it to the BurnBlockTime field.
func (o *ContractSearchResultTxData) SetBurnBlockTime(v int32) {
	o.BurnBlockTime = &v
}

// GetBlockHeight returns the BlockHeight field value if set, zero value otherwise.
func (o *ContractSearchResultTxData) GetBlockHeight() int32 {
	if o == nil || IsNil(o.BlockHeight) {
		var ret int32
		return ret
	}
	return *o.BlockHeight
}

// GetBlockHeightOk returns a tuple with the BlockHeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractSearchResultTxData) GetBlockHeightOk() (*int32, bool) {
	if o == nil || IsNil(o.BlockHeight) {
		return nil, false
	}
	return o.BlockHeight, true
}

// HasBlockHeight returns a boolean if a field has been set.
func (o *ContractSearchResultTxData) HasBlockHeight() bool {
	if o != nil && !IsNil(o.BlockHeight) {
		return true
	}

	return false
}

// SetBlockHeight gets a reference to the given int32 and assigns it to the BlockHeight field.
func (o *ContractSearchResultTxData) SetBlockHeight(v int32) {
	o.BlockHeight = &v
}

// GetTxType returns the TxType field value
func (o *ContractSearchResultTxData) GetTxType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TxType
}

// GetTxTypeOk returns a tuple with the TxType field value
// and a boolean to check if the value has been set.
func (o *ContractSearchResultTxData) GetTxTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TxType, true
}

// SetTxType sets field value
func (o *ContractSearchResultTxData) SetTxType(v string) {
	o.TxType = v
}

// GetTxId returns the TxId field value
func (o *ContractSearchResultTxData) GetTxId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TxId
}

// GetTxIdOk returns a tuple with the TxId field value
// and a boolean to check if the value has been set.
func (o *ContractSearchResultTxData) GetTxIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TxId, true
}

// SetTxId sets field value
func (o *ContractSearchResultTxData) SetTxId(v string) {
	o.TxId = v
}

func (o ContractSearchResultTxData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContractSearchResultTxData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Canonical) {
		toSerialize["canonical"] = o.Canonical
	}
	if !IsNil(o.BlockHash) {
		toSerialize["block_hash"] = o.BlockHash
	}
	if !IsNil(o.BurnBlockTime) {
		toSerialize["burn_block_time"] = o.BurnBlockTime
	}
	if !IsNil(o.BlockHeight) {
		toSerialize["block_height"] = o.BlockHeight
	}
	toSerialize["tx_type"] = o.TxType
	toSerialize["tx_id"] = o.TxId
	return toSerialize, nil
}

func (o *ContractSearchResultTxData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tx_type",
		"tx_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContractSearchResultTxData := _ContractSearchResultTxData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContractSearchResultTxData)

	if err != nil {
		return err
	}

	*o = ContractSearchResultTxData(varContractSearchResultTxData)

	return err
}

type NullableContractSearchResultTxData struct {
	value *ContractSearchResultTxData
	isSet bool
}

func (v NullableContractSearchResultTxData) Get() *ContractSearchResultTxData {
	return v.value
}

func (v *NullableContractSearchResultTxData) Set(val *ContractSearchResultTxData) {
	v.value = val
	v.isSet = true
}

func (v NullableContractSearchResultTxData) IsSet() bool {
	return v.isSet
}

func (v *NullableContractSearchResultTxData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContractSearchResultTxData(val *ContractSearchResultTxData) *NullableContractSearchResultTxData {
	return &NullableContractSearchResultTxData{value: val, isSet: true}
}

func (v NullableContractSearchResultTxData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContractSearchResultTxData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


