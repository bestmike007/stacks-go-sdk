/*
Stacks Blockchain API

Welcome to the API reference overview for the [Stacks Blockchain API](https://docs.hiro.so/stacks-blockchain-api).        [Download Postman collection](https://hirosystems.github.io/stacks-blockchain-api/collection.json)

API version: v8.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stacks_blockchain_api_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TxSearchResultTxData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TxSearchResultTxData{}

// TxSearchResultTxData struct for TxSearchResultTxData
type TxSearchResultTxData struct {
	Canonical bool `json:"canonical"`
	BlockHash string `json:"block_hash"`
	BurnBlockTime int32 `json:"burn_block_time"`
	BlockHeight int32 `json:"block_height"`
	TxType string `json:"tx_type"`
}

type _TxSearchResultTxData TxSearchResultTxData

// NewTxSearchResultTxData instantiates a new TxSearchResultTxData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTxSearchResultTxData(canonical bool, blockHash string, burnBlockTime int32, blockHeight int32, txType string) *TxSearchResultTxData {
	this := TxSearchResultTxData{}
	this.Canonical = canonical
	this.BlockHash = blockHash
	this.BurnBlockTime = burnBlockTime
	this.BlockHeight = blockHeight
	this.TxType = txType
	return &this
}

// NewTxSearchResultTxDataWithDefaults instantiates a new TxSearchResultTxData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTxSearchResultTxDataWithDefaults() *TxSearchResultTxData {
	this := TxSearchResultTxData{}
	return &this
}

// GetCanonical returns the Canonical field value
func (o *TxSearchResultTxData) GetCanonical() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Canonical
}

// GetCanonicalOk returns a tuple with the Canonical field value
// and a boolean to check if the value has been set.
func (o *TxSearchResultTxData) GetCanonicalOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Canonical, true
}

// SetCanonical sets field value
func (o *TxSearchResultTxData) SetCanonical(v bool) {
	o.Canonical = v
}

// GetBlockHash returns the BlockHash field value
func (o *TxSearchResultTxData) GetBlockHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BlockHash
}

// GetBlockHashOk returns a tuple with the BlockHash field value
// and a boolean to check if the value has been set.
func (o *TxSearchResultTxData) GetBlockHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlockHash, true
}

// SetBlockHash sets field value
func (o *TxSearchResultTxData) SetBlockHash(v string) {
	o.BlockHash = v
}

// GetBurnBlockTime returns the BurnBlockTime field value
func (o *TxSearchResultTxData) GetBurnBlockTime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BurnBlockTime
}

// GetBurnBlockTimeOk returns a tuple with the BurnBlockTime field value
// and a boolean to check if the value has been set.
func (o *TxSearchResultTxData) GetBurnBlockTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BurnBlockTime, true
}

// SetBurnBlockTime sets field value
func (o *TxSearchResultTxData) SetBurnBlockTime(v int32) {
	o.BurnBlockTime = v
}

// GetBlockHeight returns the BlockHeight field value
func (o *TxSearchResultTxData) GetBlockHeight() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BlockHeight
}

// GetBlockHeightOk returns a tuple with the BlockHeight field value
// and a boolean to check if the value has been set.
func (o *TxSearchResultTxData) GetBlockHeightOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlockHeight, true
}

// SetBlockHeight sets field value
func (o *TxSearchResultTxData) SetBlockHeight(v int32) {
	o.BlockHeight = v
}

// GetTxType returns the TxType field value
func (o *TxSearchResultTxData) GetTxType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TxType
}

// GetTxTypeOk returns a tuple with the TxType field value
// and a boolean to check if the value has been set.
func (o *TxSearchResultTxData) GetTxTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TxType, true
}

// SetTxType sets field value
func (o *TxSearchResultTxData) SetTxType(v string) {
	o.TxType = v
}

func (o TxSearchResultTxData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TxSearchResultTxData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["canonical"] = o.Canonical
	toSerialize["block_hash"] = o.BlockHash
	toSerialize["burn_block_time"] = o.BurnBlockTime
	toSerialize["block_height"] = o.BlockHeight
	toSerialize["tx_type"] = o.TxType
	return toSerialize, nil
}

func (o *TxSearchResultTxData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"canonical",
		"block_hash",
		"burn_block_time",
		"block_height",
		"tx_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTxSearchResultTxData := _TxSearchResultTxData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTxSearchResultTxData)

	if err != nil {
		return err
	}

	*o = TxSearchResultTxData(varTxSearchResultTxData)

	return err
}

type NullableTxSearchResultTxData struct {
	value *TxSearchResultTxData
	isSet bool
}

func (v NullableTxSearchResultTxData) Get() *TxSearchResultTxData {
	return v.value
}

func (v *NullableTxSearchResultTxData) Set(val *TxSearchResultTxData) {
	v.value = val
	v.isSet = true
}

func (v NullableTxSearchResultTxData) IsSet() bool {
	return v.isSet
}

func (v *NullableTxSearchResultTxData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTxSearchResultTxData(val *TxSearchResultTxData) *NullableTxSearchResultTxData {
	return &NullableTxSearchResultTxData{value: val, isSet: true}
}

func (v NullableTxSearchResultTxData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTxSearchResultTxData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


