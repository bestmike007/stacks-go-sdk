/*
Stacks Blockchain API

Testing TransactionsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package stacks_blockchain_api_client

import (
	"context"
	"testing"

	"github.com/icon-project/stacks-go-sdk/pkg/stacks_blockchain_api_client"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_stacks_blockchain_api_client_TransactionsAPIService(t *testing.T) {

	configuration := stacks_blockchain_api_client.NewConfiguration()
	configuration.Servers = stacks_blockchain_api_client.ServerConfigurations{configuration.Servers[1]}
	apiClient := stacks_blockchain_api_client.NewAPIClient(configuration)

	height := uint64(1234)
	heightOrHash := stacks_blockchain_api_client.GetBlockHeightOrHashParameter{
		Uint64: &height,
	}
	testAddress := "ST15C893XJFJ6FSKM020P9JQDB5T7X6MQTXMBPAVH"
	principal := stacks_blockchain_api_client.GetFilteredEventsAddressParameter{
		String: &testAddress,
	}
	txId := "fb6ebcee5cab4eb399f208c3ac20e3965f6ef420a249945ca5120285fce7f02f"

	t.Run("Test TransactionsAPIService GetAddressMempoolTransactions", func(t *testing.T) {
		resp, httpRes, err := apiClient.TransactionsAPI.GetAddressMempoolTransactions(context.Background(), principal).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TransactionsAPIService GetAddressTransactionEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TransactionsAPI.GetAddressTransactionEvents(context.Background(), principal, txId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TransactionsAPIService GetAddressTransactions", func(t *testing.T) {
		resp, httpRes, err := apiClient.TransactionsAPI.GetAddressTransactions(context.Background(), principal).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TransactionsAPIService GetDroppedMempoolTransactionList", func(t *testing.T) {
		resp, httpRes, err := apiClient.TransactionsAPI.GetDroppedMempoolTransactionList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TransactionsAPIService GetFilteredEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TransactionsAPI.GetFilteredEvents(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TransactionsAPIService GetMempoolTransactionList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TransactionsAPI.GetMempoolTransactionList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TransactionsAPIService GetMempoolTransactionStats", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TransactionsAPI.GetMempoolTransactionStats(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TransactionsAPIService GetRawTransactionById", func(t *testing.T) {
		resp, httpRes, err := apiClient.TransactionsAPI.GetRawTransactionById(context.Background(), txId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TransactionsAPIService GetTransactionById", func(t *testing.T) {
		resp, httpRes, err := apiClient.TransactionsAPI.GetTransactionById(context.Background(), txId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TransactionsAPIService GetTransactionList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TransactionsAPI.GetTransactionList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TransactionsAPIService GetTransactionsByBlock", func(t *testing.T) {
		resp, httpRes, err := apiClient.TransactionsAPI.GetTransactionsByBlock(context.Background(), heightOrHash).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TransactionsAPIService GetTransactionsByBlockHash", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var blockHash string

		resp, httpRes, err := apiClient.TransactionsAPI.GetTransactionsByBlockHash(context.Background(), blockHash).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TransactionsAPIService GetTransactionsByBlockHeight", func(t *testing.T) {
		resp, httpRes, err := apiClient.TransactionsAPI.GetTransactionsByBlockHeight(context.Background(), int32(height)).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TransactionsAPIService GetTxListDetails", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TransactionsAPI.GetTxListDetails(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
