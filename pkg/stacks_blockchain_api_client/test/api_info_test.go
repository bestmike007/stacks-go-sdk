/*
Stacks Blockchain API

Testing InfoAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package stacks_blockchain_api_client

import (
	"context"
	"testing"

	"github.com/icon-project/stacks-go-sdk/pkg/stacks_blockchain_api_client"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_stacks_blockchain_api_client_InfoAPIService(t *testing.T) {

	configuration := stacks_blockchain_api_client.NewConfiguration()
	configuration.Servers = stacks_blockchain_api_client.ServerConfigurations{configuration.Servers[0]}
	apiClient := stacks_blockchain_api_client.NewAPIClient(configuration)
	network := stacks_blockchain_api_client.GetNetworkBlockTimeByNetworkNetworkParameter{
		String: stacks_blockchain_api_client.PtrString("mainnet"),
	}

	t.Run("Test InfoAPIService GetNetworkBlockTimeByNetwork", func(t *testing.T) {
		resp, httpRes, err := apiClient.InfoAPI.GetNetworkBlockTimeByNetwork(context.Background(), network).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InfoAPIService GetNetworkBlockTimes", func(t *testing.T) {
		resp, httpRes, err := apiClient.InfoAPI.GetNetworkBlockTimes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InfoAPIService GetStatus", func(t *testing.T) {
		resp, httpRes, err := apiClient.InfoAPI.GetStatus(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InfoAPIService GetStxSupply", func(t *testing.T) {
		resp, httpRes, err := apiClient.InfoAPI.GetStxSupply(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InfoAPIService GetStxSupplyCirculatingPlain", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.InfoAPI.GetStxSupplyCirculatingPlain(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InfoAPIService GetStxSupplyTotalSupplyPlain", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.InfoAPI.GetStxSupplyTotalSupplyPlain(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InfoAPIService GetTotalStxSupplyLegacyFormat", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.InfoAPI.GetTotalStxSupplyLegacyFormat(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
