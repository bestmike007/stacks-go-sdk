/*
Stacks Blockchain API

Welcome to the API reference overview for the [Stacks Blockchain API](https://docs.hiro.so/stacks-blockchain-api).        [Download Postman collection](https://hirosystems.github.io/stacks-blockchain-api/collection.json)

API version: v8.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stacks_blockchain_api_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RunFaucetResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RunFaucetResponse{}

// RunFaucetResponse POST request that initiates a transfer of tokens to a specified testnet address
type RunFaucetResponse struct {
	// Indicates if the faucet call was successful
	Success bool `json:"success"`
	// The transaction ID for the faucet call
	Txid string `json:"txid"`
	// Raw transaction in hex string representation
	RawTx string `json:"raw_tx"`
}

type _RunFaucetResponse RunFaucetResponse

// NewRunFaucetResponse instantiates a new RunFaucetResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunFaucetResponse(success bool, txid string, rawTx string) *RunFaucetResponse {
	this := RunFaucetResponse{}
	this.Success = success
	this.Txid = txid
	this.RawTx = rawTx
	return &this
}

// NewRunFaucetResponseWithDefaults instantiates a new RunFaucetResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunFaucetResponseWithDefaults() *RunFaucetResponse {
	this := RunFaucetResponse{}
	return &this
}

// GetSuccess returns the Success field value
func (o *RunFaucetResponse) GetSuccess() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Success
}

// GetSuccessOk returns a tuple with the Success field value
// and a boolean to check if the value has been set.
func (o *RunFaucetResponse) GetSuccessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Success, true
}

// SetSuccess sets field value
func (o *RunFaucetResponse) SetSuccess(v bool) {
	o.Success = v
}

// GetTxid returns the Txid field value
func (o *RunFaucetResponse) GetTxid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Txid
}

// GetTxidOk returns a tuple with the Txid field value
// and a boolean to check if the value has been set.
func (o *RunFaucetResponse) GetTxidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Txid, true
}

// SetTxid sets field value
func (o *RunFaucetResponse) SetTxid(v string) {
	o.Txid = v
}

// GetRawTx returns the RawTx field value
func (o *RunFaucetResponse) GetRawTx() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RawTx
}

// GetRawTxOk returns a tuple with the RawTx field value
// and a boolean to check if the value has been set.
func (o *RunFaucetResponse) GetRawTxOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RawTx, true
}

// SetRawTx sets field value
func (o *RunFaucetResponse) SetRawTx(v string) {
	o.RawTx = v
}

func (o RunFaucetResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RunFaucetResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["success"] = o.Success
	toSerialize["txid"] = o.Txid
	toSerialize["raw_tx"] = o.RawTx
	return toSerialize, nil
}

func (o *RunFaucetResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"success",
		"txid",
		"raw_tx",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRunFaucetResponse := _RunFaucetResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRunFaucetResponse)

	if err != nil {
		return err
	}

	*o = RunFaucetResponse(varRunFaucetResponse)

	return err
}

type NullableRunFaucetResponse struct {
	value *RunFaucetResponse
	isSet bool
}

func (v NullableRunFaucetResponse) Get() *RunFaucetResponse {
	return v.value
}

func (v *NullableRunFaucetResponse) Set(val *RunFaucetResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRunFaucetResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRunFaucetResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunFaucetResponse(val *RunFaucetResponse) *NullableRunFaucetResponse {
	return &NullableRunFaucetResponse{value: val, isSet: true}
}

func (v NullableRunFaucetResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunFaucetResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


