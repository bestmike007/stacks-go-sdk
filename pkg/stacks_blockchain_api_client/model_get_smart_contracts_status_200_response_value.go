/*
Stacks Blockchain API

Welcome to the API reference overview for the [Stacks Blockchain API](https://docs.hiro.so/stacks-blockchain-api).        [Download Postman collection](https://hirosystems.github.io/stacks-blockchain-api/collection.json)

API version: v8.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stacks_blockchain_api_client

import (
	"encoding/json"
	"fmt"
)


// GetSmartContractsStatus200ResponseValue struct for GetSmartContractsStatus200ResponseValue
type GetSmartContractsStatus200ResponseValue struct {
	GetSmartContractsStatus200ResponseValueAnyOf *GetSmartContractsStatus200ResponseValueAnyOf
	GetSmartContractsStatus200ResponseValueAnyOf1 *GetSmartContractsStatus200ResponseValueAnyOf1
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *GetSmartContractsStatus200ResponseValue) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into GetSmartContractsStatus200ResponseValueAnyOf
	err = json.Unmarshal(data, &dst.GetSmartContractsStatus200ResponseValueAnyOf);
	if err == nil {
		jsonGetSmartContractsStatus200ResponseValueAnyOf, _ := json.Marshal(dst.GetSmartContractsStatus200ResponseValueAnyOf)
		if string(jsonGetSmartContractsStatus200ResponseValueAnyOf) == "{}" { // empty struct
			dst.GetSmartContractsStatus200ResponseValueAnyOf = nil
		} else {
			return nil // data stored in dst.GetSmartContractsStatus200ResponseValueAnyOf, return on the first match
		}
	} else {
		dst.GetSmartContractsStatus200ResponseValueAnyOf = nil
	}

	// try to unmarshal JSON data into GetSmartContractsStatus200ResponseValueAnyOf1
	err = json.Unmarshal(data, &dst.GetSmartContractsStatus200ResponseValueAnyOf1);
	if err == nil {
		jsonGetSmartContractsStatus200ResponseValueAnyOf1, _ := json.Marshal(dst.GetSmartContractsStatus200ResponseValueAnyOf1)
		if string(jsonGetSmartContractsStatus200ResponseValueAnyOf1) == "{}" { // empty struct
			dst.GetSmartContractsStatus200ResponseValueAnyOf1 = nil
		} else {
			return nil // data stored in dst.GetSmartContractsStatus200ResponseValueAnyOf1, return on the first match
		}
	} else {
		dst.GetSmartContractsStatus200ResponseValueAnyOf1 = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(GetSmartContractsStatus200ResponseValue)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *GetSmartContractsStatus200ResponseValue) MarshalJSON() ([]byte, error) {
	if src.GetSmartContractsStatus200ResponseValueAnyOf != nil {
		return json.Marshal(&src.GetSmartContractsStatus200ResponseValueAnyOf)
	}

	if src.GetSmartContractsStatus200ResponseValueAnyOf1 != nil {
		return json.Marshal(&src.GetSmartContractsStatus200ResponseValueAnyOf1)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableGetSmartContractsStatus200ResponseValue struct {
	value *GetSmartContractsStatus200ResponseValue
	isSet bool
}

func (v NullableGetSmartContractsStatus200ResponseValue) Get() *GetSmartContractsStatus200ResponseValue {
	return v.value
}

func (v *NullableGetSmartContractsStatus200ResponseValue) Set(val *GetSmartContractsStatus200ResponseValue) {
	v.value = val
	v.isSet = true
}

func (v NullableGetSmartContractsStatus200ResponseValue) IsSet() bool {
	return v.isSet
}

func (v *NullableGetSmartContractsStatus200ResponseValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetSmartContractsStatus200ResponseValue(val *GetSmartContractsStatus200ResponseValue) *NullableGetSmartContractsStatus200ResponseValue {
	return &NullableGetSmartContractsStatus200ResponseValue{value: val, isSet: true}
}

func (v NullableGetSmartContractsStatus200ResponseValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetSmartContractsStatus200ResponseValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


