/*
Stacks Blockchain API

Welcome to the API reference overview for the [Stacks Blockchain API](https://docs.hiro.so/stacks-blockchain-api).        [Download Postman collection](https://hirosystems.github.io/stacks-blockchain-api/collection.json)

API version: v8.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stacks_blockchain_api_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ListOfEvents type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListOfEvents{}

// ListOfEvents struct for ListOfEvents
type ListOfEvents struct {
	Limit int32 `json:"limit"`
	Offset int32 `json:"offset"`
	Events []TokenTransferTransactionEventsInner `json:"events"`
}

type _ListOfEvents ListOfEvents

// NewListOfEvents instantiates a new ListOfEvents object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListOfEvents(limit int32, offset int32, events []TokenTransferTransactionEventsInner) *ListOfEvents {
	this := ListOfEvents{}
	this.Limit = limit
	this.Offset = offset
	this.Events = events
	return &this
}

// NewListOfEventsWithDefaults instantiates a new ListOfEvents object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListOfEventsWithDefaults() *ListOfEvents {
	this := ListOfEvents{}
	return &this
}

// GetLimit returns the Limit field value
func (o *ListOfEvents) GetLimit() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Limit
}

// GetLimitOk returns a tuple with the Limit field value
// and a boolean to check if the value has been set.
func (o *ListOfEvents) GetLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Limit, true
}

// SetLimit sets field value
func (o *ListOfEvents) SetLimit(v int32) {
	o.Limit = v
}

// GetOffset returns the Offset field value
func (o *ListOfEvents) GetOffset() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value
// and a boolean to check if the value has been set.
func (o *ListOfEvents) GetOffsetOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Offset, true
}

// SetOffset sets field value
func (o *ListOfEvents) SetOffset(v int32) {
	o.Offset = v
}

// GetEvents returns the Events field value
func (o *ListOfEvents) GetEvents() []TokenTransferTransactionEventsInner {
	if o == nil {
		var ret []TokenTransferTransactionEventsInner
		return ret
	}

	return o.Events
}

// GetEventsOk returns a tuple with the Events field value
// and a boolean to check if the value has been set.
func (o *ListOfEvents) GetEventsOk() ([]TokenTransferTransactionEventsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Events, true
}

// SetEvents sets field value
func (o *ListOfEvents) SetEvents(v []TokenTransferTransactionEventsInner) {
	o.Events = v
}

func (o ListOfEvents) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListOfEvents) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["limit"] = o.Limit
	toSerialize["offset"] = o.Offset
	toSerialize["events"] = o.Events
	return toSerialize, nil
}

func (o *ListOfEvents) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"limit",
		"offset",
		"events",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListOfEvents := _ListOfEvents{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varListOfEvents)

	if err != nil {
		return err
	}

	*o = ListOfEvents(varListOfEvents)

	return err
}

type NullableListOfEvents struct {
	value *ListOfEvents
	isSet bool
}

func (v NullableListOfEvents) Get() *ListOfEvents {
	return v.value
}

func (v *NullableListOfEvents) Set(val *ListOfEvents) {
	v.value = val
	v.isSet = true
}

func (v NullableListOfEvents) IsSet() bool {
	return v.isSet
}

func (v *NullableListOfEvents) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListOfEvents(val *ListOfEvents) *NullableListOfEvents {
	return &NullableListOfEvents{value: val, isSet: true}
}

func (v NullableListOfEvents) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListOfEvents) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


